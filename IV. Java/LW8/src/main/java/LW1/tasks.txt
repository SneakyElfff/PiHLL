Intro
    1. Создать и запустить локально простой веб/REST сервис, используя Java stack: Spring
    (Spring Boot)/maven/gradle/Jersey/Spring MVC;
    2. Добавить GET ендпоинт, принимающий входные параметры в качестве queryParams в URL и возвращающий результат
    в виде JSON согласно варианту. Сервис должен принимать 4 параметра (числа) и вернуть среднее и
    медианное значение для предоставленных параметров.

Error logging and handling
    1. Добавить валидацию входных параметров с возвращением 400-ой ошибки;
    2. Добавить обработку внутренних unchecked ошибок с возвратом 500-ой ошибки;
    3. Добавить логирование действий и ошибок;
    4. Написать unit test.

Collections intro, project structure
    1. Добавить простейший кэш в виде in-memory Map для сервиса.
    Map должна содержаться в отдельном бине/классе,
    который должен добавляться в основной сервис с помощью dependency injection механизма Spring.

Concurrency
    1. Добавить сервис для подсчёта обращений к основному сервису.
    Счётчик должен быть реализован в виде отдельного класса, доступ к которому должен быть синхронизирован;
    2. Cконфигурировать нагрузочный тест и убедиться, что счётчик обращений работает правильно при большой нагрузке.

Functional programming with Java 8
    1. Преобразовать исходный сервис для работы со списком параметров для bulk-операций, используя Java 8 лямбда-выражения;
    2. Добавить POST-метод для вызова bulk-операции и передачи списка параметров в виде JSON.

Functional filtering and mapping
    1. Добавить агрегирующий функционал (подсчёт максимальных, минимальных, средних значений) для входных параметров и результатов с использованием Java 8 map/filters;
    2. Расширить результат POST соотвественно.

Data persistence
    1. Добавить возможность сохранения всех результатов вычислений в базе данных или файле,
    используя стандартные persistence фреймворки Java (Spring Data/Hibernate/MyBatis).

Asynchronous calls
    1. Добавить возможность асинхронного вызова сервиса, используя future,
    возвращать статус вызова REST сервиса, не дожидаясь результатов подсчётов;
    2. Результаты подсчётов должны быть представлены в БД по предопределённому ID.

